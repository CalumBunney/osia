
.. _annex-interface-notification:

Notification
------------

Services
""""""""

.. attention::

    The interface to subscribe, receive, and notify events is not described here.
    It has not been decided if it is worth defining a neutral interface abstracting
    the broker and making the CR & PR provider independent from the broker selected
    by the integrator, or if it is better to use the native interface of the broker.

    The first solution means an abstraction of the broker must be implemented, adding
    possible source of bugs or failures.

    The second solution means the CR or PR cannot be simply replaced by a CR or PR
    from another vendor without some adaptation to use the interface of the broker.

    To all reviewers: please comment and propose on this topic.

Notification Message
""""""""""""""""""""

This section describes the messages exchanged through notification. All messages
are encoded in ``json``. They are generated by the emitter (the source of the event)
and received by zero, one, or many receivers that have subscribed to the type of event.

.. list-table:: Event Type & Message
    :header-rows: 1
    :widths: 30 70
    :class: longtable
    
    * - Event Type
      - Message
      
    * - ``liveBirth``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the new born
        - ``uin1`` of the first parent (optional if parent is unknown)
        - ``uin2`` of the second parent (optional if parent is unknown)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``death``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the dead person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``birthCancellation``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person whose birth declaration is being cancelled

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
            }

    * - ``foetalDeath``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the new born

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``marriage``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``divorce``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``annulment``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``separation``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``adoption``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin1": "234567890"
            }
            
    * - ``legitimation``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "987654321",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``recognition``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin2": "234567890"
            }
            
    * - ``changeOfName``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``changeOfGender``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``updatePerson``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``newPerson``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }

    * - ``duplicatePerson``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person to be kept
        - ``duplicates``: list of uin for records identified as duplicates

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "duplicates": [
                    "234567890",
                    "345678901"
                ]
            }
            
.. note::

    Anonymized notification of events will be treated separately.


