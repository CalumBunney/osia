
.. _annex-interface-abis:

Biometrics
----------

Download the OpenAPI file for this interface :openapi:`abis.yaml`.

Services
""""""""

CRUD
''''

.. http:get:: /v1/subjects/{subjectId}/{encounterId}/templates
    :synopsis: Get biometrics templates

    **Get biometrics templates**

    :param string subjectId:
        the id of the subject
    :param string encounterId:
        the id of the encounter
    :query string biometricType:
        the type of biometrics to return
    :query string biometricSubType:
        the sub-type of biometrics to return
    :query string templateFormat:
        the format of the template to return
    :query string qualityFormat:
        the format of the quality to return
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :status 200:
        Operation successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Read not allowed
    :status 404:
        Unknown record or unkown biometrics
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        GET /v1/subjects/{subjectId}/{encounterId}/templates HTTP/1.1
        Host: example.com



    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        [
            {
                "biometricType": "FACE",
                "biometricSubType": "UNKNOWN",
                "template": "c3RyaW5n",
                "templateFormat": "ISO_19794_2",
                "quality": 1,
                "qualityFormat": "ISO_19794",
                "vendor": "string",
                "algorithm": "string"
            }
        ]


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: getTemplateResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            [
                {
                    "biometricType": "FACE",
                    "biometricSubType": "UNKNOWN",
                    "template": "c3RyaW5n",
                    "templateFormat": "ISO_19794_2",
                    "quality": 1,
                    "qualityFormat": "ISO_19794",
                    "vendor": "string",
                    "algorithm": "string"
                }
            ]


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:post:: /v1/subjects/{subjectId}/{encounterId}
    :synopsis: Insert one encounter

    **Insert one encounter**

    :param string subjectId:
        the id of the subject
    :param string encounterId:
        the id of the encounter
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :query string algorithm:
        Hint about the algorithm to be used
    :status 201:
        Insertion successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Insertion not allowed
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        POST /v1/subjects/{subjectId}/{encounterId} HTTP/1.1
        Host: example.com
        Content-Type: application/json

        {
            "galleries": [
                "string"
            ],
            "encounter": [
                {
                    "encounterType": "string",
                    "clientData": "c3RyaW5n",
                    "contextualData": {
                        "date": "2019-05-21"
                    },
                    "biographicData": {
                        "dateOfBirth": "2019-05-21",
                        "gender": "M",
                        "nationality": "string"
                    },
                    "biometricData": [
                        {
                            "biometricType": "FACE",
                            "biometricSubType": "UNKNOWN",
                            "image": "c3RyaW5n",
                            "imageRef": "https://example.com",
                            "captureDate": "2019-05-21",
                            "captureDevice": "string",
                            "impressionType": "LIVE_SCAN_PLAIN",
                            "width": 1,
                            "height": 1,
                            "bitdepth": 1,
                            "resolution": 1,
                            "compression": "NONE"
                        }
                    ]
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: insertResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            {
                "status": "OK",
                "subjectId": "string",
                "encounterId": "string"
            }


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:get:: /v1/subjects/{subjectId}/{encounterId}
    :synopsis: Read one encounter

    **Read one encounter**

    :param string subjectId:
        the id of the subject
    :param string encounterId:
        the id of the encounter
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :status 200:
        Read successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Read not allowed
    :status 404:
        Unknown record
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        GET /v1/subjects/{subjectId}/{encounterId} HTTP/1.1
        Host: example.com



    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "galleries": [
                "string"
            ],
            "encounter": {
                "encounterType": "string",
                "clientData": "c3RyaW5n",
                "contextualData": {
                    "date": "2019-05-21"
                },
                "biographicData": {
                    "dateOfBirth": "2019-05-21",
                    "gender": "M",
                    "nationality": "string"
                },
                "biometricData": [
                    {
                        "biometricType": "FACE",
                        "biometricSubType": "UNKNOWN",
                        "image": "c3RyaW5n",
                        "imageRef": "https://example.com",
                        "captureDate": "2019-05-21",
                        "captureDevice": "string",
                        "impressionType": "LIVE_SCAN_PLAIN",
                        "width": 1,
                        "height": 1,
                        "bitdepth": 1,
                        "resolution": 1,
                        "compression": "NONE"
                    }
                ]
            }
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: readResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            {
                "galleries": [
                    "string"
                ],
                "encounter": {
                    "encounterType": "string",
                    "clientData": "c3RyaW5n",
                    "contextualData": {
                        "date": "2019-05-21"
                    },
                    "biographicData": {
                        "dateOfBirth": "2019-05-21",
                        "gender": "M",
                        "nationality": "string"
                    },
                    "biometricData": [
                        {
                            "biometricType": "FACE",
                            "biometricSubType": "UNKNOWN",
                            "image": "c3RyaW5n",
                            "imageRef": "https://example.com",
                            "captureDate": "2019-05-21",
                            "captureDevice": "string",
                            "impressionType": "LIVE_SCAN_PLAIN",
                            "width": 1,
                            "height": 1,
                            "bitdepth": 1,
                            "resolution": 1,
                            "compression": "NONE"
                        }
                    ]
                }
            }


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:put:: /v1/subjects/{subjectId}/{encounterId}
    :synopsis: Update one encounter

    **Update one encounter**

    :param string subjectId:
        the id of the subject
    :param string encounterId:
        the id of the encounter
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :query string algorithm:
        Hint about the algorithm to be used
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 204:
        Update successful
    :status 400:
        Bad request
    :status 403:
        Update not allowed
    :status 404:
        Unknown record
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        PUT /v1/subjects/{subjectId}/{encounterId} HTTP/1.1
        Host: example.com
        Content-Type: application/json

        {
            "galleries": [
                "string"
            ],
            "encounter": [
                {
                    "encounterType": "string",
                    "clientData": "c3RyaW5n",
                    "contextualData": {
                        "date": "2019-05-21"
                    },
                    "biographicData": {
                        "dateOfBirth": "2019-05-21",
                        "gender": "M",
                        "nationality": "string"
                    },
                    "biometricData": [
                        {
                            "biometricType": "FACE",
                            "biometricSubType": "UNKNOWN",
                            "image": "c3RyaW5n",
                            "imageRef": "https://example.com",
                            "captureDate": "2019-05-21",
                            "captureDevice": "string",
                            "impressionType": "LIVE_SCAN_PLAIN",
                            "width": 1,
                            "height": 1,
                            "bitdepth": 1,
                            "resolution": 1,
                            "compression": "NONE"
                        }
                    ]
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: updateResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            "OK"


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:delete:: /v1/subjects/{subjectId}/{encounterId}
    :synopsis: Delete one encounter

    **Delete one encounter**

    :param string subjectId:
        the id of the subject
    :param string encounterId:
        the id of the encounter
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 204:
        Delete successful
    :status 400:
        Bad request
    :status 403:
        Delete not allowed
    :status 404:
        Unknown record
    :status 500:
        Unexpected error

    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: deleteResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            "OK"


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:post:: /v1/subjects
    :synopsis: Insert one encounter and generate ID for both the subject and the encounter

    **Insert one encounter and generate ID for both the subject and the encounter**

    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :query string algorithm:
        Hint about the algorithm to be used
    :status 200:
        Insertion successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Insertion not allowed
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        POST /v1/subjects HTTP/1.1
        Host: example.com
        Content-Type: application/json

        {
            "galleries": [
                "string"
            ],
            "encounter": [
                {
                    "encounterType": "string",
                    "clientData": "c3RyaW5n",
                    "contextualData": {
                        "date": "2019-05-21"
                    },
                    "biographicData": {
                        "dateOfBirth": "2019-05-21",
                        "gender": "M",
                        "nationality": "string"
                    },
                    "biometricData": [
                        {
                            "biometricType": "FACE",
                            "biometricSubType": "UNKNOWN",
                            "image": "c3RyaW5n",
                            "imageRef": "https://example.com",
                            "captureDate": "2019-05-21",
                            "captureDevice": "string",
                            "impressionType": "LIVE_SCAN_PLAIN",
                            "width": 1,
                            "height": 1,
                            "bitdepth": 1,
                            "resolution": 1,
                            "compression": "NONE"
                        }
                    ]
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "status": "OK",
            "subjectId": "string",
            "encounterId": "string"
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: insertResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            {
                "status": "OK",
                "subjectId": "string",
                "encounterId": "string"
            }


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:post:: /v1/subjects/{subjectId}
    :synopsis: Insert one encounter and generate its ID

    **Insert one encounter and generate its ID**

    :param string subjectId:
        the id of the subject
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :query string algorithm:
        Hint about the algorithm to be used
    :status 200:
        Insertion successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Insertion not allowed
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        POST /v1/subjects/{subjectId} HTTP/1.1
        Host: example.com
        Content-Type: application/json

        {
            "galleries": [
                "string"
            ],
            "encounter": [
                {
                    "encounterType": "string",
                    "clientData": "c3RyaW5n",
                    "contextualData": {
                        "date": "2019-05-21"
                    },
                    "biographicData": {
                        "dateOfBirth": "2019-05-21",
                        "gender": "M",
                        "nationality": "string"
                    },
                    "biometricData": [
                        {
                            "biometricType": "FACE",
                            "biometricSubType": "UNKNOWN",
                            "image": "c3RyaW5n",
                            "imageRef": "https://example.com",
                            "captureDate": "2019-05-21",
                            "captureDevice": "string",
                            "impressionType": "LIVE_SCAN_PLAIN",
                            "width": 1,
                            "height": 1,
                            "bitdepth": 1,
                            "resolution": 1,
                            "compression": "NONE"
                        }
                    ]
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "status": "OK",
            "subjectId": "string",
            "encounterId": "string"
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: insertResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            {
                "status": "OK",
                "subjectId": "string",
                "encounterId": "string"
            }


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:delete:: /v1/subjects/{subjectId}
    :synopsis: Delete a subject and all its encounters

    **Delete a subject and all its encounters**

    :param string subjectId:
        the id of the subject
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 204:
        Delete successful
    :status 400:
        Bad request
    :status 403:
        Delete not allowed
    :status 404:
        Unknown record
    :status 500:
        Unexpected error

    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: deleteResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            "OK"


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



Gallery
'''''''

.. http:get:: /v1/galleries
    :synopsis: Get the ID of all the galleries

    **Get the ID of all the galleries**

    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :status 200:
        Operation successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Read not allowed
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        GET /v1/galleries HTTP/1.1
        Host: example.com



    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        [
            "string"
        ]


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: getGalleriesResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            [
                "string"
            ]


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:get:: /v1/galleries/{galleryId}
    :synopsis: Get the content of one gallery

    **Get the content of one gallery**

    :param string galleryId:
        the id of the gallery
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :status 200:
        Operation successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Read not allowed
    :status 404:
        Unknown record
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        GET /v1/galleries/{galleryId} HTTP/1.1
        Host: example.com



    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        [
            {
                "subjectId": "string",
                "encounterId": "string"
            }
        ]


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: getGalleryContentResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Response callback

        **Response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            [
                {
                    "subjectId": "string",
                    "encounterId": "string"
                }
            ]


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



Search
''''''

.. http:post:: /v1/identify/{galleryId}
    :synopsis: Biometric identification

    **Biometric identification**

    Identification based on biometric data from one gallery

    :param string galleryId:
        the id of the gallery
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :query integer maxNbCand:
        the maximum number of candidates
    :query number threshold:
        the algorithm threshold
    :query string accuracyLevel:
        the accuracy level expected for this request
    :status 200:
        Request executed. Identification result is returned.
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Identification not allowed
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        POST /v1/identify/{galleryId} HTTP/1.1
        Host: example.com
        Content-Type: application/json

        {
            "filter": {
                "dateOfBirthMin": "2019-05-21",
                "dateOfBirthMax": "2019-05-21"
            },
            "biometricData": [
                {
                    "biometricType": "FACE",
                    "biometricSubType": "UNKNOWN",
                    "image": "c3RyaW5n",
                    "imageRef": "https://example.com",
                    "captureDate": "2019-05-21",
                    "captureDevice": "string",
                    "impressionType": "LIVE_SCAN_PLAIN",
                    "width": 1,
                    "height": 1,
                    "bitdepth": 1,
                    "resolution": 1,
                    "compression": "NONE"
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        [
            {
                "subjectId": "string",
                "rank": 1,
                "score": 1.0,
                "scoreList": [
                    {
                        "score": 1.0,
                        "encounterId": "string",
                        "biometricType": "FACE",
                        "biometricSubType": "UNKNOWN"
                    }
                ]
            }
        ]


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: identifyResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Identification response callback

        **Identification response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            [
                {
                    "subjectId": "string",
                    "rank": 1,
                    "score": 1.0,
                    "scoreList": [
                        {
                            "score": 1.0,
                            "encounterId": "string",
                            "biometricType": "FACE",
                            "biometricSubType": "UNKNOWN"
                        }
                    ]
                }
            ]


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:post:: /v1/identify/{galleryId}/{subjectId}
    :synopsis: Biometric identification

    **Biometric identification**

    Identification based on existing data from one gallery

    :param string galleryId:
        the id of the gallery
    :param string subjectId:
        the id of the subject
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :query integer maxNbCand:
        the maximum number of candidates
    :query number threshold:
        the algorithm threshold
    :query string accuracyLevel:
        the accuracy level expected for this request
    :status 200:
        Request executed. Identification result is returned.
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Identification not allowed
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        POST /v1/identify/{galleryId}/{subjectId} HTTP/1.1
        Host: example.com
        Content-Type: application/json

        {
            "dateOfBirthMin": "2019-05-21",
            "dateOfBirthMax": "2019-05-21"
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        [
            {
                "subjectId": "string",
                "rank": 1,
                "score": 1.0,
                "scoreList": [
                    {
                        "score": 1.0,
                        "encounterId": "string",
                        "biometricType": "FACE",
                        "biometricSubType": "UNKNOWN"
                    }
                ]
            }
        ]


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: identifyResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Identification response callback

        **Identification response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            [
                {
                    "subjectId": "string",
                    "rank": 1,
                    "score": 1.0,
                    "scoreList": [
                        {
                            "score": 1.0,
                            "encounterId": "string",
                            "biometricType": "FACE",
                            "biometricSubType": "UNKNOWN"
                        }
                    ]
                }
            ]


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:post:: /v1/verify/{galleryId}/{subjectId}
    :synopsis: Biometric verification

    **Biometric verification**

    Verification of one set of biometric data and a record in the system

    :param string galleryId:
        the id of the gallery
    :param string subjectId:
        the id of the subject
    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :query number threshold:
        the algorithm threshold
    :query string accuracyLevel:
        the accuracy level expected for this request
    :status 200:
        Verification execution successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 404:
        Unknown record
    :status 403:
        Verification not allowed
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        POST /v1/verify/{galleryId}/{subjectId} HTTP/1.1
        Host: example.com
        Content-Type: application/json

        {
            "biometricData": [
                {
                    "biometricType": "FACE",
                    "biometricSubType": "UNKNOWN",
                    "image": "c3RyaW5n",
                    "imageRef": "https://example.com",
                    "captureDate": "2019-05-21",
                    "captureDevice": "string",
                    "impressionType": "LIVE_SCAN_PLAIN",
                    "width": 1,
                    "height": 1,
                    "bitdepth": 1,
                    "resolution": 1,
                    "compression": "NONE"
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "decision": true,
            "scores": [
                {
                    "score": 1.0,
                    "encounterId": "string",
                    "biometricType": "FACE",
                    "biometricSubType": "UNKNOWN"
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: verifyResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Verification response callback

        **Verification response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            {
                "decision": true,
                "scores": [
                    {
                        "score": 1.0,
                        "encounterId": "string",
                        "biometricType": "FACE",
                        "biometricSubType": "UNKNOWN"
                    }
                ]
            }


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



.. http:post:: /v1/verify
    :synopsis: Biometric verification

    **Biometric verification**

    Verification of two sets of biometric data

    :query string transactionId:
        The id of the transaction
    :query string callback:
        the callback address, where the result will be sent when available
    :query integer priority:
        the request priority
    :query number threshold:
        the algorithm threshold
    :query string accuracyLevel:
        the accuracy level expected for this request
    :status 200:
        Verification execution successful
    :status 202:
        Request received successfully and correct, result will be returned through the callback.
        The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
    :status 400:
        Bad request
    :status 403:
        Verification not allowed
    :status 500:
        Unexpected error

    **Example request:**

    .. sourcecode:: http

        POST /v1/verify HTTP/1.1
        Host: example.com
        Content-Type: application/json

        {
            "biometricData1": [
                {
                    "biometricType": "FACE",
                    "biometricSubType": "UNKNOWN",
                    "image": "c3RyaW5n",
                    "imageRef": "https://example.com",
                    "captureDate": "2019-05-21",
                    "captureDevice": "string",
                    "impressionType": "LIVE_SCAN_PLAIN",
                    "width": 1,
                    "height": 1,
                    "bitdepth": 1,
                    "resolution": 1,
                    "compression": "NONE"
                }
            ],
            "biometricData2": [
                {
                    "biometricType": "FACE",
                    "biometricSubType": "UNKNOWN",
                    "image": "c3RyaW5n",
                    "imageRef": "https://example.com",
                    "captureDate": "2019-05-21",
                    "captureDevice": "string",
                    "impressionType": "LIVE_SCAN_PLAIN",
                    "width": 1,
                    "height": 1,
                    "bitdepth": 1,
                    "resolution": 1,
                    "compression": "NONE"
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 200 OK
        Content-Type: application/json

        {
            "decision": true,
            "scores": [
                {
                    "score": 1.0,
                    "encounterId": "string",
                    "biometricType": "FACE",
                    "biometricSubType": "UNKNOWN"
                }
            ]
        }


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 202 Accepted
        Content-Type: application/json

        "123e4567-e89b-12d3-a456-426655440000"


    **Example response:**

    .. sourcecode:: http

        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {
            "code": 1,
            "message": "string"
        }


.. admonition:: Callback: verifyResponse

    .. http:post:: ${request.query.callback}
        :synopsis: Verification response callback

        **Verification response callback**

        :query string transactionId:
            The id of the transaction
            (Required)
        :status 204:
            Response is received and accepted.
        :status 403:
            Forbidden access to the service
        :status 500:
            Unexpected error

        **Example request:**

        .. sourcecode:: http

            POST ${request.query.callback}?transactionId=string HTTP/1.1
            Host: example.com
            Content-Type: application/json

            {
                "decision": true,
                "scores": [
                    {
                        "score": 1.0,
                        "encounterId": "string",
                        "biometricType": "FACE",
                        "biometricSubType": "UNKNOWN"
                    }
                ]
            }


        **Example response:**

        .. sourcecode:: http

            HTTP/1.1 500 Internal Server Error
            Content-Type: application/json

            {
                "code": 1,
                "message": "string"
            }



Data Model
""""""""""

:todo:`To be completed`

