
Technical Specifications
------------------------

Services
""""""""

UIN Management
''''''''''''''

.. include:: _uin.rst

Data Access
'''''''''''

.. include:: _dataaccess.rst

Notifications
'''''''''''''

.. attention::

    The interface to subscribe, receive, and notify events is not described here.
    It has not been decided if it is worth defining a neutral interface abstracting
    the broker and making the CR & CI provider independent from the broker selected
    by the integrator, or if it is better to use the native interface of the broker.

    The first solution means an abstraction of the broker must be implemented, adding
    possible source of bugs or failures.

    The second solution means the CR or CI cannot be simply replaced by a CR or CI
    from another vendor without some adaptation to use the interface of the broker.

    To all reviewers: please comment and propose on this topic.

Data Model
""""""""""

.. _person-attributes:

Person Attributes
'''''''''''''''''

When exchanged in the services described in this document, the persons attributes
will apply the following rules:

.. list-table:: Person Attributes
    :header-rows: 1
    :widths: 20 30 50
    
    * - Attribute Name
      - Description
      - Format
      
    * - ``uin``
      - Unique Identity Number
      - Text
    * - ``firstName``
      - First name
      - Text
    * - ``lastName``
      - Last name
      - Text
    * - ``spouseName``
      - Spouse name
      - Text
    * - ``dateOfBirth``
      - Date of birth
      - Date (iso8601). Example: ``1987-11-17``
    * - ``placeOfBirth``
      - Place of birth
      - Text
    * - ``gender``
      - Gender
      - Number (iso5218). One of 0 (Not known), 1 (Male), 2 (Female), 9 (Not applicable)
    * - ``dateOfDeath``
      - Date of death
      - Date (iso8601). Example: ``2018-11-17``
    * - ``placeOfDeath``
      - Place of death
      - Text
    * - ``reasonOfDeath``
      - Reason of death
      - Text
    * - ``status``
      - Status. Example: missing, wanted, dead, etc.
      - Text

Notification Message
''''''''''''''''''''

This section describes the messages exchanged through notification. All messages
are encoded in ``json``. They are generated by the emitter (the source of the event)
and received by zero, one, or many receivers that have subscribed to the type of event.

.. list-table:: Event Type & Message
    :header-rows: 1
    :widths: 30 70
    :class: longtable
    
    * - Event Type
      - Message
      
    * - ``liveBirth``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the new born
        - ``uin1`` of the first parent (optional if parent is unknown)
        - ``uin2`` of the second parent (optional if parent is unknown)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``death``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the dead person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``foetalDeath``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the new born

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``marriage``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``divorce``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``annulment``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``separation``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``adoption``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin1": "234567890"
            }
            
    * - ``legitimation``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "987654321",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``recognition``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin2": "234567890"
            }
            
    * - ``changeOfName``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``changeOfGender``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``newPerson``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
.. note::

    Anonymized notification of events will be treated separately.

.. attention::

    Should the UIN be mandatory? What happens when a person has no UIN?
    
.. _matching-error:

Matching Error
''''''''''''''

A list of:

.. list-table:: Matching Error Object
    :header-rows: 1
    :widths: 25 20 35 10
    
    * - Attribute
      - Type
      - Description
      - Mandatory

    * - ``attributeName``
      - String
      - Attribute name (See :ref:`person-attributes`)
      - Yes

    * - ``errorCode``
      - 32 bits integer
      - Error code. Possible values: ``0`` (attribute does not exist); ``1`` (attribute exists but does not match)
      - Yes

.. _expression:

Expression
''''''''''

.. list-table:: Expression Object
    :header-rows: 1
    :widths: 25 20 35 10
    
    * - Attribute
      - Type
      - Description
      - Mandatory

    * - ``attributeName``
      - String
      - Attribute name (See :ref:`person-attributes`)
      - Yes

    * - ``operator``
      - String
      - Operator to apply. Possible values: ``<``, ``>``, ``=``, ``>=``, ``<=``
      - Yes

    * - ``value``
      - string, or integer, or boolean
      - The value to be evaluated
      - Yes

.. _error:

Error
'''''

.. list-table:: Error Object
    :header-rows: 1
    :widths: 25 20 35 10
    
    * - Attribute
      - Type
      - Description
      - Mandatory

    * - ``code``
      - 32 bits integer
      - Error code
      - Yes

    * - ``message``
      - String
      - Error message
      - Yes
