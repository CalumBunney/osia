openapi: 3.0.0
info:
  description: SIA ABIS Interface
  version: "1.0"
  title: SIA ABIS Interface
tags:
  - name: CRUD
  - name: Search
  - name: Gallery
paths:
  /v1/subjects/{subjectId}/{encounterId}:
    post:
      tags:
        - CRUD
      summary: Insert one encounter
      operationId: insert
      parameters:
        - name: subjectId
          in: path
          description: the id of the subject
          required: true
          schema:
            type: string
        - name: encounterId
          in: path
          description: the id of the encounter
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
        - name: algorithm
          in: query
          description: Hint about the algorithm to be used
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - galleries
                - encounter
              properties:
                galleries:
                  type: array
                  items:
                    type: string
                encounter:
                  type: array
                  items:
                    $ref: '#/components/schemas/Encounter'
      responses:
        '201':
          description: Insertion successful
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '400':
          description: Bad request
        '403':
          description: Insertion not allowed
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        insertResponse:
          '${request.query.callback}':
            post:
              summary: Response callback
              operationId: insertCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Result of the insertion
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                          enum: [OK, ERROR]
                        subjectId:
                          type: string
                        encounterId:
                          type: string
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
    get:
      tags:
        - CRUD
      summary: Read one encounter
      operationId: read
      parameters:
        - name: subjectId
          in: path
          description: the id of the subject
          required: true
          schema:
            type: string
        - name: encounterId
          in: path
          description: the id of the encounter
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Read successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - galleries
                  - encounter
                properties:
                  galleries:
                    type: array
                    items:
                      type: string
                  encounter:
                    $ref: '#/components/schemas/Encounter'
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '400':
          description: Bad request
        '403':
          description: Read not allowed
        '404':
          description: Unknown record
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        insertResponse:
          '${request.query.callback}':
            post:
              summary: Response callback
              operationId: readCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Encounter data
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - galleries
                        - encounter
                      properties:
                        galleries:
                          type: array
                          items:
                            type: string
                        encounter:
                          $ref: '#/components/schemas/Encounter'
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
    put:
      tags:
        - CRUD
      summary: Update one encounter
      operationId: update
      parameters:
        - name: subjectId
          in: path
          description: the id of the subject
          required: true
          schema:
            type: string
        - name: encounterId
          in: path
          description: the id of the encounter
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
        - name: algorithm
          in: query
          description: Hint about the algorithm to be used
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - galleries
                - encounter
              properties:
                galleries:
                  type: array
                  items:
                    type: string
                encounter:
                  type: array
                  items:
                    $ref: '#/components/schemas/Encounter'
      responses:
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '204':
          description: Update successful
        '400':
          description: Bad request
        '403':
          description: Update not allowed
        '404':
          description: Unknown record
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        updateResponse:
          '${request.query.callback}':
            post:
              summary: Response callback
              operationId: updateCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Result of the update
                content:
                  application/json:
                    schema:
                      type: string
                      enum: [OK, ERROR]
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
    delete:
      tags:
        - CRUD
      summary: Delete one encounter
      operationId: delete
      parameters:
        - name: subjectId
          in: path
          description: the id of the subject
          required: true
          schema:
            type: string
        - name: encounterId
          in: path
          description: the id of the encounter
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
      responses:
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '204':
          description: Delete successful
        '400':
          description: Bad request
        '403':
          description: Delete not allowed
        '404':
          description: Unknown record
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        deleteResponse:
          '${request.query.callback}':
            post:
              summary: Response callback
              operationId: deleteCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Result of the deletion
                content:
                  application/json:
                    schema:
                      type: string
                      enum: [OK, ERROR]
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'

  /v1/subjects/{subjectId}:
    post:
      tags:
        - CRUD
      summary: Insert one encounter and generate its ID
      operationId: insertNoId
      parameters:
        - name: subjectId
          in: path
          description: the id of the subject
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
        - name: algorithm
          in: query
          description: Hint about the algorithm to be used
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - galleries
                - encounter
              properties:
                galleries:
                  type: array
                  items:
                    type: string
                encounter:
                  type: array
                  items:
                    $ref: '#/components/schemas/Encounter'
      responses:
        '200':
          description: Insertion successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - encounterId
                properties:
                  status:
                    type: string
                    enum: [OK, ERROR]
                  subjectId:
                    type: string
                  encounterId:
                    type: string
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '400':
          description: Bad request
        '403':
          description: Insertion not allowed
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        insertResponse:
          '${request.query.callback}':
            post:
              summary: Response callback
              operationId: insertNoIdCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Result of the insertion
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - status
                        - encounterId
                      properties:
                        status:
                          type: string
                          enum: [OK, ERROR]
                        subjectId:
                          type: string
                        encounterId:
                          type: string
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
    delete:
      tags:
        - CRUD
      summary: Delete all encounters
      operationId: deleteAll
      parameters:
        - name: subjectId
          in: path
          description: the id of the subject
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
      responses:
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '204':
          description: Delete successful
        '400':
          description: Bad request
        '403':
          description: Delete not allowed
        '404':
          description: Unknown record
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        deleteResponse:
          '${request.query.callback}':
            post:
              summary: Response callback
              operationId: deleteAllCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Result of the deletion
                content:
                  application/json:
                    schema:
                      type: string
                      enum: [OK, ERROR]
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'

  /v1/identify/{galleryId}:
    post:
      tags:
        - Search
      summary: Biometric identification
      description: Identification based on biometric data from one gallery
      operationId: identify
      parameters:
        - name: galleryId
          in: path
          description: the id of the gallery
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
        - name: maxNbCand
          in: query
          description: the maximum number of candidates
          required: false
          schema:
            type: integer
        - name: threshold
          in: query
          description: the algorithm threshold
          required: false
          schema:
            type: number
        - name: accuracyLevel
          in: query
          description: the accuracy level expected for this request
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - filter
                - biometricData
              properties:
                filter:
                  $ref:  '#/components/schemas/Filter'
                biometricData:
                  type: array
                  items:
                    $ref: '#/components/schemas/BiometricData'
      responses:
        '200':
          description: Request executed. Identification result is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '400':
          description: Bad request
        '403':
          description: Identification not allowed
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        identifyResponse:
          '${request.query.callback}':
            post:
              summary: Identification response callback
              operationId: identifyCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Result of the identification (list of candidate)
                content:
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Candidate'
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'

  /v1/verify/{galleryId}/{subjectId}:
    post:
      tags:
        - Search
      summary: Biometric verification
      description: Verification of one set of biometric data and a record in the system
      operationId: verifyFromId
      parameters:
        - name: galleryId
          in: path
          description: the id of the gallery
          required: true
          schema:
            type: string
        - name: subjectId
          in: path
          description: the id of the subject
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
        - name: threshold
          in: query
          description: the algorithm threshold
          required: false
          schema:
            type: number
        - name: accuracyLevel
          in: query
          description: the accuracy level expected for this request
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - biometricData
              properties:
                biometricData:
                  type: array
                  items:
                    $ref: '#/components/schemas/BiometricData'
      responses:
        '200':
          description: Verification execution successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - decision
                properties:
                  decision:
                    type: boolean
                  scores:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScoreDetail'
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '400':
          description: Bad request
        '404':
          description: Unknown record
        '403':
          description: Verification not allowed
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        verifyResponse:
          '${request.query.callback}':
            post:
              summary: Verification response callback
              operationId: verifyFromIdCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Result of the verification
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - decision
                      properties:
                        decision:
                          type: boolean
                        scores:
                          type: array
                          items:
                            $ref: '#/components/schemas/ScoreDetail'
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'

  /v1/verify:
    post:
      tags:
        - Search
      summary: Biometric verification
      description: Verification of two sets of biometric data
      operationId: verifyFromBio
      parameters:
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
        - name: threshold
          in: query
          description: the algorithm threshold
          required: false
          schema:
            type: number
        - name: accuracyLevel
          in: query
          description: the accuracy level expected for this request
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - biometricData1
                - biometricData2
              properties:
                biometricData1:
                  type: array
                  items:
                    $ref: '#/components/schemas/BiometricData'
                biometricData2:
                  type: array
                  items:
                    $ref: '#/components/schemas/BiometricData'
      responses:
        '200':
          description: Verification execution successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - decision
                properties:
                  decision:
                    type: boolean
                  scores:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScoreDetail'
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '400':
          description: Bad request
        '403':
          description: Verification not allowed
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        verifyResponse:
          '${request.query.callback}':
            post:
              summary: Verification response callback
              operationId: verifyFromIdCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: Result of the verification
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - decision
                      properties:
                        decision:
                          type: boolean
                        scores:
                          type: array
                          items:
                            $ref: '#/components/schemas/ScoreDetail'
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'

  /v1/galleries:
    get:
      tags:
        - Gallery
      summary: Get the ID of all the galleries
      operationId: getGalleries
      parameters:
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '400':
          description: Bad request
        '403':
          description: Read not allowed
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        getGalleriesResponse:
          '${request.query.callback}':
            post:
              summary: Response callback
              operationId: galleriesCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: List of gallery IDs
                content:
                  application/json:
                    schema:
                      type: array
                      items:
                        type: string
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'

  /v1/galleries/{galleryId}:
    get:
      tags:
        - Gallery
      summary: Get the content of one gallery
      operationId: getGalleryContent
      parameters:
        - name: galleryId
          in: path
          description: the id of the gallery
          required: true
          schema:
            type: string
        - name: transactionId
          in: query
          description: The id of the transaction
          required: false
          schema:
            type: string
        - name: callback
          in: query
          description: the callback address, where the result will be sent when available
          required: false
          schema:
            type: string
            format: uri
            example: "http://client.com/callback"
        - name: priority
          in: query
          description: the request priority
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - subjectId
                    - encounterId
                  properties:
                    subjectId:
                      type: string
                    encounterId:
                      type: string
        '202':
          description: |
            Request received successfully and correct, result will be returned through the callback.
            The transaction ID is returned (if no transaction ID was provided, one is generated by the server)
          content:
            application/json:
              schema:
                type: string
                example: "123e4567-e89b-12d3-a456-426655440000"
        '400':
          description: Bad request
        '403':
          description: Read not allowed
        '404':
          description: Unknown record
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      callbacks:
        getGalleryContentResponse:
          '${request.query.callback}':
            post:
              summary: Response callback
              operationId: galleryContentCB
              parameters:
                # query parameters
                - name: transactionId
                  in: query
                  required: true
                  description: The id of the transaction
                  schema:
                    type: string
              requestBody:
                required: true
                description: List of encounters IDs
                content:
                  application/json:
                    schema:
                      type: array
                      items:
                        type: object
                        required:
                          - subjectId
                          - encounterId
                        properties:
                          subjectId:
                            type: string
                          encounterId:
                            type: string
              responses:
                '204':
                  description: Response is received and accepted.
                '403':
                  description: Forbidden access to the service
                '500':
                  description: Unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          description: Error code
          type: integer
          format: int32
        message:
          description: Error message
          type: string
    Encounter:
      type: object
      required:
        - encounterType
        - biometricData
      properties:
        encounterType:
          type: string
          description: Type of the encounter
        clientData:
          type: string
          format: byte
        contextualData:
          $ref: '#/components/schemas/ContextualData'
        biographicData:
          $ref: '#/components/schemas/BiographicData'
        biometricData:
          type: array
          items:
            $ref: '#/components/schemas/BiometricData'
    ContextualData:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2019-01-11"
    BiographicData:
      type: object
      properties:
        lastName:
          type: string
          description: the last name of a person
          example: "Doo"
        firstName:
          type: string
          description: the first name of a person
          example: "John"
        dateOfBirth:
          type: string
          format: date
          example: "1985-11-30"
    BiometricData:
      type: object
      required:
        - biometricType
      properties:
        biometricType:
          $ref: '#/components/schemas/BiometricType'
        biometricSubType:
          $ref: '#/components/schemas/BiometricSubType'
        image:
          type: string
          format: byte
        imageRef:
          type: string
          format: uri
          example: "http://imageserver.com/image?id=00003"
    BiometricType:
      type: string
      enum:
        - FACE
        - FINGER
        - IRIS
        - UNKNOWN
    BiometricSubType:
      type: string
      enum:
        - UNKNOWN
        - RIGHT_THUMB
        - RIGHT_INDEX
        - RIGHT_MIDDLE
        - RIGHT_RING
        - RIGHT_LITTLE
        - LEFT_THUMB
        - LEFT_INDEX
        - LEFT_MIDDLE
        - LEFT_RING
        - LEFT_LITTLE
        - PLAIN_RIGHT_FOUR_FINGERS
        - PLAIN_LEFT_FOUR_FINGERS
        - PLAIN_THUMBS
        - UNKNOWN_PALM
        - RIGHT_FULL_PALM
        - RIGHT_WRITERS_PALM
        - LEFT_FULL_PALM
        - LEFT_WRITERS_PALM
        - RIGHT_LOWER_PALM
        - RIGHT_UPPER_PALM
        - LEFT_LOWER_PALM
        - LEFT_UPPER_PALM
        - RIGHT_OTHER
        - LEFT_OTHER
        - RIGHT_INTERDIGITAL
        - RIGHT_THENAR
        - LEFT_INTERDIGITAL
        - LEFT_THENAR
        - LEFT_HYPOTHENAR
        - EYE_UNDEF
        - EYE_RIGHT
        - EYE_LEFT
        - PORTRAIT
    Filter:
      type: object
      properties:
        dateOfBirthMin:
          type: string
          format: date
          example: "1980-01-01"
        dateOfBirthMax:
          type: string
          format: date
          example: "2019-12-31"
    Candidate:
      type: object
      required:
        - subjectId
        - rank
        - score
      properties:
        subjectId:
          type: string
          description: the identifier of the subject
        rank:
          type: integer
          format: int32
          description: >-
            the rank of the candidate in relation to other candidates for the
            same biometric identification operation
        score:
          type: number
          format: float
          description: >-
            the score of the candidate in relation to other candidates for
            the same biometric identification operation
        scoreList:
          type: array
          description: >-
            a list of comparison score(s) and optionally the type and subtype of
            the relating biometric
          items:
            $ref: '#/components/schemas/ScoreDetail'
    ScoreDetail:
      type: object
      required:
        - score
      properties:
        score:
          type: number
          format: float
          description: the score
        encounterId:
          type: string
        biometricType:
          $ref: '#/components/schemas/BiometricType'
        biometricSubType:
          $ref: '#/components/schemas/BiometricSubType'

